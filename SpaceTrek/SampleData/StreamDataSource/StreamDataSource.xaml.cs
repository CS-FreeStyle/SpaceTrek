//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.StreamDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class StreamDataSource { }
#else

	public class StreamDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public StreamDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/SpaceTrek;component/SampleData/StreamDataSource/StreamDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Stream _Stream = new Stream();

		public Stream Stream
		{
			get
			{
				return this._Stream;
			}
		}
	}

	public class StreamItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _name = string.Empty;

		public string name
		{
			get
			{
				return this._name;
			}

			set
			{
				if (this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("name");
				}
			}
		}

		private string _description = string.Empty;

		public string description
		{
			get
			{
				return this._description;
			}

			set
			{
				if (this._description != value)
				{
					this._description = value;
					this.OnPropertyChanged("description");
				}
			}
		}

		private string _uploader = string.Empty;

		public string uploader
		{
			get
			{
				return this._uploader;
			}

			set
			{
				if (this._uploader != value)
				{
					this._uploader = value;
					this.OnPropertyChanged("uploader");
				}
			}
		}

		private double _view = 0;

		public double view
		{
			get
			{
				return this._view;
			}

			set
			{
				if (this._view != value)
				{
					this._view = value;
					this.OnPropertyChanged("view");
				}
			}
		}

		private System.Windows.Media.ImageSource _images = null;

		public System.Windows.Media.ImageSource images
		{
			get
			{
				return this._images;
			}

			set
			{
				if (this._images != value)
				{
					this._images = value;
					this.OnPropertyChanged("images");
				}
			}
		}
	}

	public class Stream : System.Collections.ObjectModel.ObservableCollection<StreamItem>
	{ 
	}
#endif
}
